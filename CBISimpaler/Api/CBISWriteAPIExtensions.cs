// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CBISImpaler
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CBISWriteAPI.
    /// </summary>
    public static partial class CBISWriteAPIExtensions
    {
            /// <summary>
            /// Set category tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static IList<CBISWriteAPIModelsCategory> SetCategoryTree(this ICBISWriteAPI operations, CBISWriteAPIModelsQueryEditCategoryTree edit)
            {
                return operations.SetCategoryTreeAsync(edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set category tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CBISWriteAPIModelsCategory>> SetCategoryTreeAsync(this ICBISWriteAPI operations, CBISWriteAPIModelsQueryEditCategoryTree edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCategoryTreeWithHttpMessagesAsync(edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set category tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static IList<CBISWriteAPIModelsGeo> SetGeoTree(this ICBISWriteAPI operations, CBISWriteAPIModelsQueryEditGeoTree edit)
            {
                return operations.SetGeoTreeAsync(edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set category tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CBISWriteAPIModelsGeo>> SetGeoTreeAsync(this ICBISWriteAPI operations, CBISWriteAPIModelsQueryEditGeoTree edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetGeoTreeWithHttpMessagesAsync(edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set category tree for a supplier that is an Operator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static IList<CBISWriteAPIModelsCategory> SetCategoryTreeForSupplier(this ICBISWriteAPI operations, CBISWriteAPIModelsQueryEditCategoryTree edit, string organization)
            {
                return operations.SetCategoryTreeForSupplierAsync(edit, organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set category tree for a supplier that is an Operator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CBISWriteAPIModelsCategory>> SetCategoryTreeForSupplierAsync(this ICBISWriteAPI operations, CBISWriteAPIModelsQueryEditCategoryTree edit, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCategoryTreeForSupplierWithHttpMessagesAsync(edit, organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set geo tree for a supplier that is an Operator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static IList<CBISWriteAPIModelsGeo> SetGeoTreeForSupplier(this ICBISWriteAPI operations, CBISWriteAPIModelsQueryEditGeoTree edit, string organization)
            {
                return operations.SetGeoTreeForSupplierAsync(edit, organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set geo tree for a supplier that is an Operator
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CBISWriteAPIModelsGeo>> SetGeoTreeForSupplierAsync(this ICBISWriteAPI operations, CBISWriteAPIModelsQueryEditGeoTree edit, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetGeoTreeForSupplierWithHttpMessagesAsync(edit, organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
