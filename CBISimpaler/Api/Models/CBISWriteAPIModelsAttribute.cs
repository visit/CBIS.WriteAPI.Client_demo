// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CBISimpaler.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CBISWriteAPIModelsAttribute
    {
        /// <summary>
        /// Initializes a new instance of the CBISWriteAPIModelsAttribute
        /// class.
        /// </summary>
        public CBISWriteAPIModelsAttribute()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CBISWriteAPIModelsAttribute
        /// class.
        /// </summary>
        /// <param name="type">Possible values include: 'Integer', 'String',
        /// 'Double', 'Boolean'</param>
        public CBISWriteAPIModelsAttribute(int? attributId = default(int?), bool? languageInvariant = default(bool?), bool? allowHtml = default(bool?), IDictionary<string, string> translations = default(IDictionary<string, string>), string name = default(string), string type = default(string))
        {
            AttributId = attributId;
            LanguageInvariant = languageInvariant;
            AllowHtml = allowHtml;
            Translations = translations;
            Name = name;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AttributId")]
        public int? AttributId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LanguageInvariant")]
        public bool? LanguageInvariant { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "AllowHtml")]
        public bool? AllowHtml { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Translations")]
        public IDictionary<string, string> Translations { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Integer', 'String',
        /// 'Double', 'Boolean'
        /// </summary>
        [JsonProperty(PropertyName = "Type")]
        public string Type { get; set; }

    }
}
