// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CBISimpaler
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WriteAPI.
    /// </summary>
    public static partial class WriteAPIExtensions
    {
            /// <summary>
            /// Ping API and check credentials
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string Ping(this IWriteAPI operations)
            {
                return operations.PingAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Ping API and check credentials
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> PingAsync(this IWriteAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PingWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if product exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            public static bool? ProductExists(this IWriteAPI operations, string reference)
            {
                return operations.ProductExistsAsync(reference).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if product exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ProductExistsAsync(this IWriteAPI operations, string reference, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProductExistsWithHttpMessagesAsync(reference, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all active references for subsystem
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subsystem'>
            /// </param>
            public static IList<string> GetActiveReferences(this IWriteAPI operations, string subsystem)
            {
                return operations.GetActiveReferencesAsync(subsystem).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all active references for subsystem
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subsystem'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetActiveReferencesAsync(this IWriteAPI operations, string subsystem, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveReferencesWithHttpMessagesAsync(subsystem, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='product'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult CreateProduct(this IWriteAPI operations, CBISWriteAPIModelsQueryCreateProduct product)
            {
                return operations.CreateProductAsync(product).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> CreateProductAsync(this IWriteAPI operations, CBISWriteAPIModelsQueryCreateProduct product, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProductWithHttpMessagesAsync(product, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Archive a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult ArchiveProduct(this IWriteAPI operations, string reference)
            {
                return operations.ArchiveProductAsync(reference).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Archive a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> ArchiveProductAsync(this IWriteAPI operations, string reference, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ArchiveProductWithHttpMessagesAsync(reference, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Activate a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult ActivateProduct(this IWriteAPI operations, string reference)
            {
                return operations.ActivateProductAsync(reference).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activate a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> ActivateProductAsync(this IWriteAPI operations, string reference, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActivateProductWithHttpMessagesAsync(reference, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set parent product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='parentreference'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetParentProduct(this IWriteAPI operations, string reference, string parentreference)
            {
                return operations.SetParentProductAsync(reference, parentreference).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set parent product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='parentreference'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetParentProductAsync(this IWriteAPI operations, string reference, string parentreference, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetParentProductWithHttpMessagesAsync(reference, parentreference, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetInformation(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditInformation edit)
            {
                return operations.SetInformationAsync(reference, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetInformationAsync(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditInformation edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetInformationWithHttpMessagesAsync(reference, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set categories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetCategories(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditCategory edit)
            {
                return operations.SetCategoriesAsync(reference, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set categories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetCategoriesAsync(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditCategory edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCategoriesWithHttpMessagesAsync(reference, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set Geos
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetGeos(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditGeo edit)
            {
                return operations.SetGeosAsync(reference, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set Geos
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetGeosAsync(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditGeo edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetGeosWithHttpMessagesAsync(reference, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set references
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetReferences(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditReference edit)
            {
                return operations.SetReferencesAsync(reference, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set references
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetReferencesAsync(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditReference edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetReferencesWithHttpMessagesAsync(reference, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set occaions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetOccasions(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditOccasion edit)
            {
                return operations.SetOccasionsAsync(reference, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set occaions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetOccasionsAsync(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditOccasion edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetOccasionsWithHttpMessagesAsync(reference, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set media
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static bool? SetMedia(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditMedia edit)
            {
                return operations.SetMediaAsync(reference, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set media
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> SetMediaAsync(this IWriteAPI operations, string reference, CBISWriteAPIModelsQueryEditMedia edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetMediaWithHttpMessagesAsync(reference, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set relevance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='relevance'>
            /// Possible values include: 'None', 'Local', 'Regional', 'National',
            /// 'International'
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetRelevance(this IWriteAPI operations, string reference, string relevance)
            {
                return operations.SetRelevanceAsync(reference, relevance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set relevance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='relevance'>
            /// Possible values include: 'None', 'Local', 'Regional', 'National',
            /// 'International'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetRelevanceAsync(this IWriteAPI operations, string reference, string relevance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetRelevanceWithHttpMessagesAsync(reference, relevance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set expiration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='expiration'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetExpiration(this IWriteAPI operations, string reference, System.DateTime expiration)
            {
                return operations.SetExpirationAsync(reference, expiration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set expiration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='expiration'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetExpirationAsync(this IWriteAPI operations, string reference, System.DateTime expiration, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetExpirationWithHttpMessagesAsync(reference, expiration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set revision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='revision'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetRevision(this IWriteAPI operations, string reference, System.DateTime revision)
            {
                return operations.SetRevisionAsync(reference, revision).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set revision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='revision'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetRevisionAsync(this IWriteAPI operations, string reference, System.DateTime revision, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetRevisionWithHttpMessagesAsync(reference, revision, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set publish date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='publishDate'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetPublishDate(this IWriteAPI operations, string reference, System.DateTime publishDate)
            {
                return operations.SetPublishDateAsync(reference, publishDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set publish date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='publishDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetPublishDateAsync(this IWriteAPI operations, string reference, System.DateTime publishDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetPublishDateWithHttpMessagesAsync(reference, publishDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set highlight
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='highlight'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetIsHighlight(this IWriteAPI operations, string reference, bool highlight)
            {
                return operations.SetIsHighlightAsync(reference, highlight).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set highlight
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='highlight'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetIsHighlightAsync(this IWriteAPI operations, string reference, bool highlight, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetIsHighlightWithHttpMessagesAsync(reference, highlight, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            public static CBISWriteAPIModelsProduct GetProduct(this IWriteAPI operations, string reference)
            {
                return operations.GetProductAsync(reference).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProduct> GetProductAsync(this IWriteAPI operations, string reference, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductWithHttpMessagesAsync(reference, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set the template to use in the UI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='template'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetTemplate(this IWriteAPI operations, string reference, int template)
            {
                return operations.SetTemplateAsync(reference, template).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set the template to use in the UI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='template'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetTemplateAsync(this IWriteAPI operations, string reference, int template, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetTemplateWithHttpMessagesAsync(reference, template, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get category tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CBISWriteAPIModelsCategory> GetCategories(this IWriteAPI operations)
            {
                return operations.GetCategoriesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get category tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CBISWriteAPIModelsCategory>> GetCategoriesAsync(this IWriteAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCategoriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get geo tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CBISWriteAPIModelsGeo> GetGeos(this IWriteAPI operations)
            {
                return operations.GetGeosAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get geo tree
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CBISWriteAPIModelsGeo>> GetGeosAsync(this IWriteAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeosWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get attributes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<CBISWriteAPIModelsAttribute> GetAttributes(this IWriteAPI operations)
            {
                return operations.GetAttributesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get attributes
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CBISWriteAPIModelsAttribute>> GetAttributesAsync(this IWriteAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttributesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the html tags and attributes allowed in attributes supporting html
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static CBISWriteAPIModelsAllowedHtml GetHtmlTagsAndAttributes(this IWriteAPI operations)
            {
                return operations.GetHtmlTagsAndAttributesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the html tags and attributes allowed in attributes supporting html
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsAllowedHtml> GetHtmlTagsAndAttributesAsync(this IWriteAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHtmlTagsAndAttributesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the cultures used by the organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetLanguages(this IWriteAPI operations)
            {
                return operations.GetLanguagesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the cultures used by the organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetLanguagesAsync(this IWriteAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLanguagesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get category tree for a supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static IList<CBISWriteAPIModelsCategory> GetCategoriesForSupplier(this IWriteAPI operations, string organization)
            {
                return operations.GetCategoriesForSupplierAsync(organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get category tree for a supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CBISWriteAPIModelsCategory>> GetCategoriesForSupplierAsync(this IWriteAPI operations, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCategoriesForSupplierWithHttpMessagesAsync(organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get geo tree for a supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static IList<CBISWriteAPIModelsGeo> GetGeosForSupplier(this IWriteAPI operations, string organization)
            {
                return operations.GetGeosForSupplierAsync(organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get geo tree for a supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CBISWriteAPIModelsGeo>> GetGeosForSupplierAsync(this IWriteAPI operations, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeosForSupplierWithHttpMessagesAsync(organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get attributes for a supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static IList<CBISWriteAPIModelsAttribute> GetAttributesForSupplier(this IWriteAPI operations, string organization)
            {
                return operations.GetAttributesForSupplierAsync(organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get attributes for a supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CBISWriteAPIModelsAttribute>> GetAttributesForSupplierAsync(this IWriteAPI operations, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAttributesForSupplierWithHttpMessagesAsync(organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the html tags and attributes allowed in attributes supporting html for
            /// a supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static CBISWriteAPIModelsAllowedHtml GetHtmlTagsAndAttributesForSupplier(this IWriteAPI operations, string organization)
            {
                return operations.GetHtmlTagsAndAttributesForSupplierAsync(organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the html tags and attributes allowed in attributes supporting html for
            /// a supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsAllowedHtml> GetHtmlTagsAndAttributesForSupplierAsync(this IWriteAPI operations, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHtmlTagsAndAttributesForSupplierWithHttpMessagesAsync(organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the cultures used by the supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static IList<string> GetLanguagesForSupplier(this IWriteAPI operations, string organization)
            {
                return operations.GetLanguagesForSupplierAsync(organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the cultures used by the supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetLanguagesForSupplierAsync(this IWriteAPI operations, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLanguagesForSupplierWithHttpMessagesAsync(organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check supplier existence and access
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static bool? SupplierExists(this IWriteAPI operations, string organization)
            {
                return operations.SupplierExistsAsync(organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check supplier existence and access
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> SupplierExistsAsync(this IWriteAPI operations, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SupplierExistsWithHttpMessagesAsync(organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static CBISWriteAPIModelsOrganizationReference CreateSupplier(this IWriteAPI operations, CBISWriteAPIModelsQueryCreateOrganization organization)
            {
                return operations.CreateSupplierAsync(organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsOrganizationReference> CreateSupplierAsync(this IWriteAPI operations, CBISWriteAPIModelsQueryCreateOrganization organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSupplierWithHttpMessagesAsync(organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsOrganizationReference UpdateSupplier(this IWriteAPI operations, string organization, CBISWriteAPIModelsQueryEditOrganization edit)
            {
                return operations.UpdateSupplierAsync(organization, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update supplier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsOrganizationReference> UpdateSupplierAsync(this IWriteAPI operations, string organization, CBISWriteAPIModelsQueryEditOrganization edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSupplierWithHttpMessagesAsync(organization, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update your organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsOrganizationReference UpdateOrganization(this IWriteAPI operations, CBISWriteAPIModelsQueryEditOrganization edit)
            {
                return operations.UpdateOrganizationAsync(edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update your organization
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsOrganizationReference> UpdateOrganizationAsync(this IWriteAPI operations, CBISWriteAPIModelsQueryEditOrganization edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateOrganizationWithHttpMessagesAsync(edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if a product exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static bool? ProductExistsForSupplier(this IWriteAPI operations, string reference, string organization)
            {
                return operations.ProductExistsForSupplierAsync(reference, organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a product exists
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ProductExistsForSupplierAsync(this IWriteAPI operations, string reference, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ProductExistsForSupplierWithHttpMessagesAsync(reference, organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all active references for subsystem
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subsystem'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static IList<string> GetActiveReferencesForSupplier(this IWriteAPI operations, string subsystem, string organization)
            {
                return operations.GetActiveReferencesForSupplierAsync(subsystem, organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all active references for subsystem
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subsystem'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetActiveReferencesForSupplierAsync(this IWriteAPI operations, string subsystem, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetActiveReferencesForSupplierWithHttpMessagesAsync(subsystem, organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a prdoduct
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult CreateProductForSupplier(this IWriteAPI operations, CBISWriteAPIModelsQueryCreateProduct product, string organization)
            {
                return operations.CreateProductForSupplierAsync(product, organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a prdoduct
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='product'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> CreateProductForSupplierAsync(this IWriteAPI operations, CBISWriteAPIModelsQueryCreateProduct product, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProductForSupplierWithHttpMessagesAsync(product, organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Archive a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult ArchiveProductForSupplier(this IWriteAPI operations, string reference, string organization)
            {
                return operations.ArchiveProductForSupplierAsync(reference, organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Archive a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> ArchiveProductForSupplierAsync(this IWriteAPI operations, string reference, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ArchiveProductForSupplierWithHttpMessagesAsync(reference, organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Activate a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult ActivateProductForSupplier(this IWriteAPI operations, string reference, string organization)
            {
                return operations.ActivateProductForSupplierAsync(reference, organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Activate a product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> ActivateProductForSupplierAsync(this IWriteAPI operations, string reference, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActivateProductForSupplierWithHttpMessagesAsync(reference, organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set parent produdct
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='parentreference'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetParentProductForSupplier(this IWriteAPI operations, string reference, string organization, string parentreference)
            {
                return operations.SetParentProductForSupplierAsync(reference, organization, parentreference).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set parent produdct
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='parentreference'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetParentProductForSupplierAsync(this IWriteAPI operations, string reference, string organization, string parentreference, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetParentProductForSupplierWithHttpMessagesAsync(reference, organization, parentreference, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetInformationForSupplier(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditInformation edit)
            {
                return operations.SetInformationForSupplierAsync(reference, organization, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set information
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetInformationForSupplierAsync(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditInformation edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetInformationForSupplierWithHttpMessagesAsync(reference, organization, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set categories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetCategoriesForSupplier(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditCategory edit)
            {
                return operations.SetCategoriesForSupplierAsync(reference, organization, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set categories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetCategoriesForSupplierAsync(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditCategory edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetCategoriesForSupplierWithHttpMessagesAsync(reference, organization, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set Geos
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetGeosForSupplier(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditGeo edit)
            {
                return operations.SetGeosForSupplierAsync(reference, organization, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set Geos
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetGeosForSupplierAsync(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditGeo edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetGeosForSupplierWithHttpMessagesAsync(reference, organization, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set references
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetReferencesForSupplier(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditReference edit)
            {
                return operations.SetReferencesForSupplierAsync(reference, organization, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set references
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetReferencesForSupplierAsync(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditReference edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetReferencesForSupplierWithHttpMessagesAsync(reference, organization, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set occasions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetOccasionsForSupplier(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditOccasion edit)
            {
                return operations.SetOccasionsForSupplierAsync(reference, organization, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set occasions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetOccasionsForSupplierAsync(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditOccasion edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetOccasionsForSupplierWithHttpMessagesAsync(reference, organization, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set media
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            public static bool? SetMediaForSupplier(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditMedia edit)
            {
                return operations.SetMediaForSupplierAsync(reference, organization, edit).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set media
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='edit'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> SetMediaForSupplierAsync(this IWriteAPI operations, string reference, string organization, CBISWriteAPIModelsQueryEditMedia edit, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetMediaForSupplierWithHttpMessagesAsync(reference, organization, edit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set relevance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='relevance'>
            /// Possible values include: 'None', 'Local', 'Regional', 'National',
            /// 'International'
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetRelevanceForSupplier(this IWriteAPI operations, string reference, string organization, string relevance)
            {
                return operations.SetRelevanceForSupplierAsync(reference, organization, relevance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set relevance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='relevance'>
            /// Possible values include: 'None', 'Local', 'Regional', 'National',
            /// 'International'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetRelevanceForSupplierAsync(this IWriteAPI operations, string reference, string organization, string relevance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetRelevanceForSupplierWithHttpMessagesAsync(reference, organization, relevance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set expiration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='expiration'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetExpirationForSupplier(this IWriteAPI operations, string reference, string organization, System.DateTime expiration)
            {
                return operations.SetExpirationForSupplierAsync(reference, organization, expiration).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set expiration
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='expiration'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetExpirationForSupplierAsync(this IWriteAPI operations, string reference, string organization, System.DateTime expiration, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetExpirationForSupplierWithHttpMessagesAsync(reference, organization, expiration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set revision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='revision'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetRevisionForSupplier(this IWriteAPI operations, string reference, string organization, System.DateTime revision)
            {
                return operations.SetRevisionForSupplierAsync(reference, organization, revision).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set revision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='revision'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetRevisionForSupplierAsync(this IWriteAPI operations, string reference, string organization, System.DateTime revision, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetRevisionForSupplierWithHttpMessagesAsync(reference, organization, revision, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set publish date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='publishDate'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetPublishDateForSupplier(this IWriteAPI operations, string reference, string organization, System.DateTime publishDate)
            {
                return operations.SetPublishDateForSupplierAsync(reference, organization, publishDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set publish date
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='publishDate'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetPublishDateForSupplierAsync(this IWriteAPI operations, string reference, string organization, System.DateTime publishDate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetPublishDateForSupplierWithHttpMessagesAsync(reference, organization, publishDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set highlight
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='highlight'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetIsHighlightForSupplier(this IWriteAPI operations, string reference, string organization, bool highlight)
            {
                return operations.SetIsHighlightForSupplierAsync(reference, organization, highlight).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set highlight
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='highlight'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetIsHighlightForSupplierAsync(this IWriteAPI operations, string reference, string organization, bool highlight, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetIsHighlightForSupplierWithHttpMessagesAsync(reference, organization, highlight, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            public static CBISWriteAPIModelsProduct GetProductForSupplier(this IWriteAPI operations, string reference, string organization)
            {
                return operations.GetProductForSupplierAsync(reference, organization).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProduct> GetProductForSupplierAsync(this IWriteAPI operations, string reference, string organization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductForSupplierWithHttpMessagesAsync(reference, organization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set template to use in the UI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='template'>
            /// </param>
            public static CBISWriteAPIModelsProductWriteResult SetTemplateForSupplier(this IWriteAPI operations, string reference, string organization, int template)
            {
                return operations.SetTemplateForSupplierAsync(reference, organization, template).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set template to use in the UI
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='reference'>
            /// </param>
            /// <param name='organization'>
            /// </param>
            /// <param name='template'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CBISWriteAPIModelsProductWriteResult> SetTemplateForSupplierAsync(this IWriteAPI operations, string reference, string organization, int template, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetTemplateForSupplierWithHttpMessagesAsync(reference, organization, template, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
